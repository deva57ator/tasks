name: Deploy tasks (stg & prod)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Если DEPLOY_PORT не задан в Secrets — будем использовать 22 через bash-стандарт ${var:-default}
    env:
      SSH_HOST: ${{ secrets.DEPLOY_HOST }}
      SSH_USER: ${{ secrets.DEPLOY_USER }}
      SSH_PORT: ${{ secrets.DEPLOY_PORT }}

      PATH_STG:  ${{ secrets.DEPLOY_PATH_STG }}        # напр. /srv/tasks-stg
      PATH_PROD: ${{ secrets.DEPLOY_PATH_PROD }}       # напр. /srv/tasks-prod

      WEB_STG:   ${{ secrets.DEPLOY_WEB_PATH_STG }}    # напр. /var/www/tasks-stg
      WEB_PROD:  ${{ secrets.DEPLOY_WEB_PATH_PROD }}   # напр. /var/www/tasks-prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH agent (load SSH_KEY)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_KEY }}

      - name: Add host key (known_hosts)
        run: |
          : "${SSH_PORT:=22}"
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SSH_PORT}" -H "${SSH_HOST}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # =======================
      # API → STAGING (/srv/*)
      # =======================
      - name: Copy API → STG
        run: |
          : "${SSH_PORT:=22}"
          rsync -av --delete -e "ssh -p ${SSH_PORT}" \
            --filter='merge infra/rsync/api.filter' \
            ./ "${SSH_USER}@${SSH_HOST}:${PATH_STG}-tmp/"

          ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" "set -eu
            DEPLOY_PATH='${PATH_STG}'
            rm -rf \"\$DEPLOY_PATH/apps/api\"
            install -d \"\$DEPLOY_PATH/apps\"
            mv \"${PATH_STG}-tmp/apps/api\" \"\$DEPLOY_PATH/apps/\"
            rm -rf \"${PATH_STG}-tmp\"
          "

      # ======================
      # API → PRODUCTION
      # ======================
      - name: Copy API → PROD
        run: |
          : "${SSH_PORT:=22}"
          rsync -av --delete -e "ssh -p ${SSH_PORT}" \
            --filter='merge infra/rsync/api.filter' \
            ./ "${SSH_USER}@${SSH_HOST}:${PATH_PROD}-tmp/"

          ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" "set -eu
            DEPLOY_PATH='${PATH_PROD}'
            rm -rf \"\$DEPLOY_PATH/apps/api\"
            install -d \"\$DEPLOY_PATH/apps\"
            mv \"${PATH_PROD}-tmp/apps/api\" \"\$DEPLOY_PATH/apps/\"
            rm -rf \"${PATH_PROD}-tmp\"
          "

      # =======================
      # WEB → STAGING (/var/www/*)
      # =======================
      - name: Copy WEB → STG webroot
        run: |
          : "${SSH_PORT:=22}"
          rsync -av --delete -e "ssh -p ${SSH_PORT}" \
            --filter='merge infra/rsync/web.filter' \
            ./ "${SSH_USER}@${SSH_HOST}:${WEB_STG}/"

      # =======================
      # WEB → PRODUCTION
      # =======================
      - name: Copy WEB → PROD webroot
        run: |
          : "${SSH_PORT:=22}"
          rsync -av --delete -e "ssh -p ${SSH_PORT}" \
            --filter='merge infra/rsync/web.filter' \
            ./ "${SSH_USER}@${SSH_HOST}:${WEB_PROD}/"

      # =======================
      # post-deploy: STAGING
      # =======================
      - name: Install deps, migrate, restart (STG)
        run: |
          : "${SSH_PORT:=22}"
          ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" "set -eu
            cd '${PATH_STG}/apps/api'
            if [ -f package-lock.json ]; then
              npm ci --omit=dev --no-audit --no-fund
            else
              npm install --omit=dev --no-audit --no-fund
            fi
            npm run migrate
            sudo -n systemctl daemon-reload || true
            sudo -n systemctl restart tasks-stg
            systemctl status --no-pager tasks-stg | tail -n +1 || true
          "

      # =======================
      # post-deploy: PRODUCTION
      # =======================
      - name: Install deps, migrate, restart (PROD)
        run: |
          : "${SSH_PORT:=22}"
          ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" "set -eu
            cd '${PATH_PROD}/apps/api'
            if [ -f package-lock.json ]; then
              npm ci --omit=dev --no-audit --no-fund
            else
              npm install --omit=dev --no-audit --no-fund
            fi
            npm run migrate
            sudo -n systemctl daemon-reload || true
            sudo -n systemctl restart tasks-prod
            systemctl status --no-pager tasks-prod | tail -n +1 || true
          "
